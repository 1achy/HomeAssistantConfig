blueprint:

  name: ZHA - CALEX - Smart remote

  description: >-
    This automation simulates the use of the Calex Dimmer Switch Colour Control

  domain: automation

  input:
    mode:
      name: Automation Mode
      description: "https://www.home-assistant.io/docs/automation/modes/"
      default: restart
      selector:
        select:
          mode: dropdown
          options:
            - single
            - restart
            - queued
            - parallel
    max:
      name: Automation Max Queue
      description: The maximum number of runs that can be executing and/or queued up at a time.
      default: 10
      selector:
        number:
          mode: box
          min: 1
          max: 100
    remote:
      name: Calex remote control
      description: Select the remote control you wish to use.
      selector:
        device:
          integration: zha
#          manufacturer: Calex
#          model: Smart Wall Switch
    light:
      name: Light
      selector:
        target:
          entity:
            domain: light
#    dim_step:
#      name: Dim step
#      description: The dim amound in percentage
#      default: 10
#      selector:
#        number:
#          min: 0
#          max: 100
#          unit_of_measurement: percentage

mode: !input mode
max: !input max
max_exceeded: silent

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      cluster_id: "{{ trigger.event.data.cluster_id }}"
      endpoint_id: "{{ trigger.event.data.endpoint_id }}"
      #args: "{{ trigger.event.data.args }}"
      #params: "{{ trigger.event.data.params }}"
      transition_time: "{% if trigger.event.data.params.transition_time is defined %}{{ trigger.event.data.params.transition_time }}{%else%}0{% endif %}"
      step_mode: "{% if trigger.event.data.params.step_mode is defined %}{{ trigger.event.data.params.step_mode|int }}{% endif %}"
      step_size: "{% if trigger.event.data.params.step_size is defined %}{{ trigger.event.data.params.step_size|int }}{% endif %}"
      move_mode: "{% if trigger.event.data.params.move_mode is defined %}{{ trigger.event.data.params.move_mode|int }}{% endif %}"
      move_size: "{% if trigger.event.data.params.move_size is defined %}{{ trigger.event.data.params.move_size|int }}{% endif %}"
      rate: "{% if trigger.event.data.params.rate is defined %}{{ trigger.event.data.params.rate }}{% endif %}"
      color_temp_mireds: "{% if trigger.event.data.params.color_temp_mireds is defined %}{{ trigger.event.data.params.color_temp_mireds }}{% endif %}"
      enhanced_hue: "{% if trigger.event.data.params.enhanced_hue is defined %}{{ trigger.event.data.params.enhanced_hue }}{% endif %}"
      saturation: "{% if trigger.event.data.params.saturation is defined %}{{ trigger.event.data.params.saturation }}{% endif %}"

  - choose:
      # Short-Press on the ON button.
      - conditions:
          - "{{ command == 'on' }}"
        sequence:
          - service: light.turn_on
            target: !input light

      # Short-Press on the OFF button.
      - conditions:
          - "{{ command == 'off' }}"
        sequence:
          - service: light.turn_off
            target: !input light

      # Short-Press on the DIM UP button.
      # args[0] = params.step_mode
      # args[1] = params.step_size (42)
      # args[2] = params.transition_time (3)
      - conditions:
          - "{{ command == 'step' }}"
          - "{{ step_mode == 0 }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              transition: "{{ transition_time / 10 }}"
              brightness_step_pct: 10
#              brightness_step_pct: {{ step_size }}

      # Short-Press on the DIM DOWN button.
      # args[0] = params.step_mode
      # args[1] = params.step_size (42)
      # args[2] = params.transition_time (3)
      - conditions:
          - "{{ command == 'step' }}"
          - "{{ step_mode== 1 }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              transition: "{{ transition_time / 10 }}"
              brightness_step_pct: -10
#              brightness_step_pct: "-{{ step_size }}"

      # Hold on the DIM UP button.
      # args[0] = params.move_mode
      # args[1] = params.rate (100)
      - conditions:
          - "{{ command == 'move' }}"
          - "{{ move_mode == 0 }}"
        sequence:
          - repeat:
              count: 10
              sequence:
                - service: light.turn_on
                  target: !input light
                  data:
                    transition: "{{ transition_time / 10 }}"
                    brightness_step_pct: 10
#                    brightness_step_pct: "{{ rate / 10 }}"
                - delay: 0.5

      # Hold on the DIM DOWN button.
      # args[0] = params.move_mode
      # args[1] = params.rate (100)
      - conditions:
          - "{{ command == 'move' }}"
          - "{{ move_mode == 1 }}"
        sequence:
          - repeat:
              count: 10
              sequence:
                - service: light.turn_on
                  target: !input light
                  data:
                    transition: "{{ transition_time / 10 }}"
                    brightness_step_pct: -10
#                    brightness_step_pct: -"{{ rate / 10 }}"
                - delay: 0.5

      # Short-Press on the W button.
      # args[0] = params.color_temp_mireds
      # args[1] = params.transition_time
      - conditions:
          - "{{ command == 'move_to_color_temp' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              transition: "{{ transition_time / 10 }}"
              color_temp: "{{ color_temp_mireds }}"

      # Touch color rotator
      # args[0] = params.enhanced_hue
      # args[1] = params.saturation
      # args[2] = params.transition_time
      - conditions:
          - "{{ command == 'enhanced_move_to_hue_and_saturation' }}"
        sequence:
          - service: notify.admins
            data:
              message: "{{ enhanced_hue }}"
          - service: light.turn_on
            target: !input light
            data:
              transition: "{{ transition_time / 10 }}"
              hs_color:
                - "{{ ( enhanced_hue|float / 65535 ) * 360 }}"
                - "{{ ( saturation|float / 254 ) * 100 }}"

    default: []
